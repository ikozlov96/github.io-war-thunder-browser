// Utility functions for the War Thunder Browser app

// Function to get image path based on country and vehicle type
export const getImagePath = (country, type) => {
    // Replace with actual image path logic when you have images
    // For now using placeholder images with unique colors by country
    const countryCode = country.toLowerCase();
    const typeCode = type.toLowerCase().replace('_', '-');

    // In production, you would use actual images:
    // return `${process.env.PUBLIC_URL}/images/${countryCode}/${typeCode}.png`;

    // For now, use placeholders
    return `https://via.placeholder.com/80?text=${countryCode}-${typeCode}`;
};

// Get a readable country name with flag emoji
export const getCountryName = (code) => {
    const countries = {
        usa: "üá∫üá∏ USA",
        germany: "üá©üá™ Germany",
        ussr: "üá∑üá∫ USSR",
        britain: "üá¨üáß Great Britain",
        japan: "üáØüáµ Japan",
        china: "üá®üá≥ China",
        italy: "üáÆüáπ Italy",
        france: "üá´üá∑ France",
        sweden: "üá∏üá™ Sweden",
        israel: "üáÆüá± Israel"
    };
    return countries[code] || code;
};

// Get a readable vehicle type name
export const getTypeName = (code) => {
    const types = {
        light_tank: "Light Tank",
        medium_tank: "Medium Tank",
        heavy_tank: "Heavy Tank",
        tank_destroyer: "Tank Destroyer",
        spaa: "Anti-Air"
    };
    return types[code] || code;
};

// Get color based on country for UI accents
export const getCountryColor = (country) => {
    const colors = {
        usa: '#3b82f6',      // blue
        germany: '#84cc16',  // green
        ussr: '#ef4444',     // red
        britain: '#14b8a6',  // teal
        japan: '#d946ef',    // fuchsia
        china: '#f97316',    // orange
        italy: '#22c55e',    // green
        france: '#06b6d4',   // cyan
        sweden: '#facc15',   // yellow
        israel: '#a855f7'    // purple
    };
    return colors[country] || '#6b7280'; // Default gray
};

// Format BR to always show with one decimal place
export const formatBR = (br) => {
    const numBR = parseFloat(br);
    return numBR.toFixed(1);
};

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
// 1 - –¢—è–∂–µ–ª—ã–µ —Ç–∞–Ω–∫–∏ (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
// 2 - –°—Ä–µ–¥–Ω–∏–µ —Ç–∞–Ω–∫–∏
// 3 - –ü–¢ (–ø—Ä–æ—Ç–∏–≤–æ—Ç–∞–Ω–∫–æ–≤—ã–µ)
// 4 - –õ–µ–≥–∫–∏–µ —Ç–∞–Ω–∫–∏
// 5 - –ó–µ–Ω–∏—Ç–∫–∏ (–Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
export const getTypePriority = (type) => {
    const priorities = {
        heavy_tank: 1,       // –¢—è–∂–µ–ª—ã–µ —Ç–∞–Ω–∫–∏ (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        medium_tank: 2,      // –°—Ä–µ–¥–Ω–∏–µ —Ç–∞–Ω–∫–∏
        tank_destroyer: 3,   // –ü–¢ (–ø—Ä–æ—Ç–∏–≤–æ—Ç–∞–Ω–∫–æ–≤—ã–µ)
        light_tank: 4,       // –õ–µ–≥–∫–∏–µ —Ç–∞–Ω–∫–∏
        spaa: 5              // –ó–µ–Ω–∏—Ç–∫–∏ (–Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    };

    return priorities[type] || 99; // –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Å—Ç–∞–≤–∏–º –µ–≥–æ –≤ –∫–æ–Ω–µ—Ü
};

// –ü–æ–ª—É—á–∏—Ç—å SVG –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ç–µ—Ö–Ω–∏–∫–∏
export const getTypeIcon = (type) => {
    const icons = {
        light_tank: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="-10 0 1862 2048"><path fill="currentColor" d="M185 650h1482v477h-1482v-477z"/></svg>',
        medium_tank: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="-10 0 1862 2048"><path fill="currentColor" d="M594 1319h-409v-618h1482v618h-411v-246h-662v246z"/></svg>',
        heavy_tank: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="-10 0 1862 2048"><path fill="currentColor" d="M591 1466h-406v-617h406v-245l137 -126h392l137 126v245h410v617h-410v-249h-666v249z"/></svg>',
        tank_destroyer: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="-10 0 1794 2048"><path fill="currentColor" d="M1599 1467h-1414v-368l946 -854h398l-929 854h999v368z"/></svg>',
        spaa: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="-10 0 1862 2048"><path fill="currentColor" d="M1667 1467h-1482v-326h303v-811h221v811h437v-811h216v811h305v326z"/></svg>'
    };

    return icons[type] || '';
};

// Check if vehicle matches all active filters
export const filterVehicle = (vehicle, filters) => {
    const { nameFilter, countryFilter, typeFilter, brRange } = filters;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ª–∏ –∏–º—è —Ç–µ—Ö–Ω–∏–∫–∏
    if (!vehicle.name) {
        return false;
    }

    // Filter by name
    if (nameFilter && !vehicle.name.toLowerCase().includes(nameFilter.toLowerCase())) {
        return false;
    }

    // Filter by selected countries
    if (countryFilter.length > 0 && !countryFilter.includes(vehicle.country)) {
        return false;
    }

    // Filter by selected types
    if (typeFilter.length > 0 && !typeFilter.includes(vehicle.type)) {
        return false;
    }

    // Filter by BR range —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω
    if (brRange && brRange.length === 2) {
        const vehicleBR = parseFloat(vehicle.br);
        if (vehicleBR < brRange[0] || vehicleBR > brRange[1]) {
            return false;
        }
    }

    return true;
};

// –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BR –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –¥–∞–Ω–Ω—ã—Ö
export const findClosestBRValue = (value, availableBRs) => {
    if (!availableBRs || availableBRs.length === 0) return value;

    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BR –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    return availableBRs.reduce((prev, curr) => {
        return (Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev);
    });
};